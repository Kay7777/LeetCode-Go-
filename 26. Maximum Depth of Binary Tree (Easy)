Solution 1 (48ms)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        count = 1
        if root is None:
            return 0
        return self.maxCount(root, count)
    
    def maxCount(self,root,count):
        if root.left == None and root.right == None:
            return count
        if root.left != None and root.right == None:
            count += 1
            count = self.maxCount(root.left, count)
        if root.left == None and root.right != None:
            count += 1
            count = self.maxCount(root.right, count)
        if root.left != None and root.right != None:
            count += 1
            count = max(self.maxCount(root.left,count), self.maxCount(root.right,count))
        return count
        
        
        
        
        
Solution 2  (52ms)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        count = 1
        if root is None:
            return 0
        return self.maxCount(root, count)
    
    def maxCount(self,root,count):
        if root is None:
            return 0
        return max(self.maxDepth(root.left), self.maxDepth(root.right)) +1
