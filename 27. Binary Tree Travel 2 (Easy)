Solution 1 : Bad Try but get the separate leves ....
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    final_list = []
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        
        if root is None:
            return 
        Solution.final_list.append(self.getList(root))
        
        return Solution.final_list
    def getList(self,root):
        alist = []
        if root.left != None:
            alist.append(root.left)
            self.getList(root.left)
        if root.right != None:
            alist.append(root.right)
            self.getList(root.right)
        return alist
        
        
        
Right Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        if root is None:
            return []
        result, current = [], [root]
        # root is the whole TreeNode, not just a root.val
        while current:
            next_level, vals = [],[]
            for node in current:
            # node is subTreeNode in the current
                vals.append(node.val)
                # vals is the list consisting of each node the same level
                if node.left:
                    next_level.append(node.left)
                    # next_level to write down the next level nodes
                    # those are not value, but subTreeNode
                if node.right:
                    next_level.append(node.right)
            current = next_level
            # current change into subTreeNode
            result.append(vals)
        return result[::-1]
