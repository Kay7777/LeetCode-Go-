solution 1 (My solution)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def minDepth(self, root: TreeNode) -> int:
        count = 0
        if root is None:
            return count
        return self.get_min(root, count)
    def get_min(self, root,count):
        if root is None:
            return count
        left_root, right_root = self.get_min(root.left,count), self.get_min(root.right, count)
        if left_root and right_root:
            return min(left_root, right_root) + 1
        else:
            return max(left_root, right_root) + 1
        
        
 solution 2 (referrence) 
 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if root is None:
            return 0
        if root.left and root.right:
            return min(self.minDepth(root.left),self.minDepth(root.right)) +1
        else:
            return max(self.minDepth(root.left),self.minDepth(root.right)) +1
        
